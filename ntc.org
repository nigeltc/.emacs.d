#+STARTIP: overview
* init.el - add this code to run the .org init file
Elpa is needed for undo-tree
#+BEGIN_SRC emacs-lisp
  ;; ;; Set up packages
  ;; (setq package-archives
  ;;       '(("melpa" . "http://melpa.org/packages/")
  ;; 	("gnu" . "http://elpa.gnu.org/packages/")))
  ;; (package-initialize)

  ;; ;; Load and run ntc.org
  ;; (org-babel-load-file
  ;;  (expand-file-name "~/.emacs.d/ntc.org"))
#+END_SRC
* use-package, try - package management
1. use-package - simplifies package loading
2. try - try packages before you install them   
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package try
	     :ensure t)
#+END_SRC
* which-key - display available keybindings
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config
    (which-key-mode))
#+END_SRC
* basic customizations
#+BEGIN_SRC emacs-lisp
;; turn off welcome screen
(setq inhibit-startup-message t)

;; turn off toolbar
(tool-bar-mode -1)

;; show column number
(setq column-number-mode t)

;; Replace with bufler
;; list-buffers like dired
(defalias 'list-buffers 'ibuffer-other-window)

;; this speeds up Tramp mode
(setq tramp-default-method "ssh")

;; highlight current line
(global-hl-line-mode t)  

;; enable narrowing
(put 'narrow-to-region 'disabled nil)

#+END_SRC

* theme - set the current theme
#+BEGIN_SRC emacs-lisp
  (if (display-graphic-p)
      ;; Load the GUI theme
      (load-theme 'firmament-edge t)
    ;; Load the terminal theme
    (load-theme 'firmament-edge t))
#+END_SRC
* ido-mode - interactive file and buffer matching
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+END_SRC

* auto-complete - autocompletion
#+BEGIN_SRC emacs-lisp
  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :init
  ;;   (ac-config-default)
  ;;   (global-auto-complete-mode t))
#+END_SRC
* ivy - autocompletion
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :ensure t
    :config
    (ivy-mode t))
#+END_SRC
* flycheck - syntax checking
#+BEGIN_SRC 
(use-package flycheck
  :ensure t
  :init 
  (global-flycheck-mode t))
#+END_SRC
* yasnippet - template system
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :ensure t)
#+END_SRC
* treemacs - tree layout file explorer
#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :config
    (setq treemacs-no-png-images t
	  treemacs-width 24)
    :bind ("C-c t" . treemacs))
#+END_SRC
* lsp-mode - LSP setup
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((python-mode . lsp))
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode)
#+END_SRC
* undo-tree - treat undo history as a tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))
#+END_SRC
* expand-region - expand the region by semantic units
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :config
  (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
* iedit - edit multiple regions
#+BEGIN_SRC emacs-list
(use-package iedit
  :ensure t)
#+END_SRC
* org-mode - stuff for org Mode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-capture-templates
	'(("s" "Saved" entry (file "~/dev/saved.org") "* %?\n%i\n")))

#+END_SRC
* c-mode - c/c++ editing setup
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
	    (lambda ()
	      (setq c-default-style "k&r"
		    c-basic-offset 4)))

#+END_SRC
* python-mode - python editing setup
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook
	    (lambda ()
	      (setq indent-tabs-mode nil)
	      (setq tab-width 4)
	      (setq py-indent-offset 4)))

#+END_SRC
* cider - clojure editing setup
#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t)

  (use-package paredit
    :ensure t)
#+END_SRC
* markdown-mode - markdown editing setup
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
       :ensure t)
#+END_SRC
* web-mode - web editing setup
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :config 
  (setq web-mode-markup-indent-offset 4)
  (setq web-mode-css-indent-offset 4)
  (setq web-mode-code-indent-offset 4)
  (setq web-mode-enable-auto-expanding t))
(add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.php\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.ejs\\'" . web-mode))
#+END_SRC

* emmet-mode - generate HTML from CSS-like snippets
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :init
    (add-hook 'web-mode-hook 'emmet-mode)
    (add-hook 'css-mode-hook 'emmet-mode)
    (add-hook 'sqml-mode-hook 'emmet-mode))
#+END_SRC
* hydra - tie related commands into a hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)

  (defhydra hydra-zoom (global-map "<f2>")
       "zoom"
       ("g" text-scale-increase "in")
       ("l" text-scale-decrease "out")
       ("q" nil "quit"))

#+END_SRC
* extra configuration
#+BEGIN_SRC emacs-lisp
  (defun load-if-exists (f)
    "Load F if it exists"
    (if (file-readable-p f)
	(load-file f)))

  (load-if-exists "ntc-extra.og")

#+END_SRC
